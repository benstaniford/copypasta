name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # CI Job: Build and test C# code on every push/PR
  ci:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # C# Build and Test
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore win-copypasta/CopyPasta.sln

    - name: Build C# Project (Debug)
      run: msbuild win-copypasta/CopyPasta.csproj /p:Configuration=Debug /p:Platform="Any CPU"

    - name: Build C# Project (Release)
      run: msbuild win-copypasta/CopyPasta.csproj /p:Configuration=Release /p:Platform="Any CPU"

    # Docker tests for main Flask app
    - name: Run Docker tests
      run: |
        echo "Running Docker container tests..."
        if (Test-Path "./scripts/test-all") {
          & "./scripts/test-all"
        } elseif (Test-Path "./test-docker/test-container.sh") {
          bash "./test-docker/test-container.sh"
        } else {
          echo "Running basic Docker compose test..."
          docker compose up -d
          Start-Sleep -Seconds 10
          docker compose down
        }
      continue-on-error: true

    - name: Upload Build Artifacts (CI)
      uses: actions/upload-artifact@v4
      with:
        name: ci-build-artifacts
        path: |
          win-copypasta/bin/Debug/
          win-copypasta/bin/Release/
        retention-days: 7

  # Release Job: Build WiX installer and create GitHub release (only on tags)
  release:
    name: Create Release
    runs-on: windows-latest
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        $version = "${{ github.ref_name }}" -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    # C# Release Build
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Update Assembly Version
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $csprojPath = "win-copypasta/CopyPasta.csproj"
        
        Write-Host "Updating CopyPasta.csproj with version: $version"
        
        # Read the current content
        $content = Get-Content $csprojPath -Raw
        
        # Update version properties
        $content = $content -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $content = $content -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        
        # Write back to file
        Set-Content $csprojPath -Value $content -NoNewline
        
        Write-Host "✓ CopyPasta.csproj updated"
        Write-Host "Updated version lines:"
        Get-Content $csprojPath | Select-String "AssemblyVersion|FileVersion"

    - name: Update WiX Product Version
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $wxsPath = "win-copypasta/CopyPasta.Installer/Product.wxs"
        
        Write-Host "Updating Product.wxs with version: $version"
        
        # Read the current content
        $content = Get-Content $wxsPath -Raw
        
        # Update the Product Version attribute (WiX requires x.x.x.x format)
        $content = $content -replace '(<Product[^>]*\s)Version="[\d\.]*"', "`$1Version=`"$version.0`""
        
        # Write back to file
        Set-Content $wxsPath -Value $content -NoNewline
        
        Write-Host "✓ Product.wxs updated"
        Write-Host "Updated version line:"
        Get-Content $wxsPath | Select-String "Version="

    - name: Restore NuGet packages
      run: nuget restore win-copypasta/CopyPasta.sln

    - name: Build C# Project (Release)
      run: msbuild win-copypasta/CopyPasta.csproj /p:Configuration=Release /p:Platform=x86

    # WiX Installer Build
    - name: Setup WiX Toolset
      run: |
        Write-Host "Installing WiX Toolset..."
        choco install wixtoolset -y --no-progress
        Write-Host "Refreshing environment..."
        refreshenv
        # Add WiX to PATH for this session
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        echo "PATH=$env:PATH" >> $env:GITHUB_ENV

    - name: Remove BOM from WiX files
      run: |
        Write-Host "Checking and removing BOM from WiX files..."
        $wxsPath = "win-copypasta/CopyPasta.Installer/Product.wxs"
        $wixprojPath = "win-copypasta/CopyPasta.Installer/CopyPasta.Installer.wixproj"
        
        # Function to remove BOM from file
        function Remove-BOM {
            param($filePath)
            if (Test-Path $filePath) {
                $content = Get-Content $filePath -Raw -Encoding UTF8
                # Remove BOM if present (EF BB BF)
                if ($content.StartsWith([char]0xFEFF)) {
                    Write-Host "Removing BOM from: $filePath"
                    $content = $content.Substring(1)
                    [System.IO.File]::WriteAllText($filePath, $content, [System.Text.UTF8Encoding]::new($false))
                } else {
                    Write-Host "No BOM found in: $filePath"
                }
            }
        }
        
        Remove-BOM $wxsPath
        Remove-BOM $wixprojPath
        Write-Host "✓ BOM check/removal completed"

    - name: Build WiX Installer
      run: |
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        msbuild win-copypasta/CopyPasta.Installer/CopyPasta.Installer.wixproj /p:Configuration=Release /p:Platform=x86

    - name: Verify MSI exists
      run: |
        $msiPath = "win-copypasta/CopyPasta.Installer/bin/Release/CopyPastaInstaller.msi"
        if (Test-Path $msiPath) {
          Write-Host "✓ MSI file found: $msiPath"
          $size = (Get-Item $msiPath).Length
          Write-Host "✓ MSI size: $([math]::Round($size / 1MB, 2)) MB"
        } else {
          Write-Host "✗ MSI file not found: $msiPath"
          Get-ChildItem win-copypasta/CopyPasta.Installer/bin -Recurse
          exit 1
        }

    # Create GitHub Release using GitHub CLI
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $tag = "${{ github.ref_name }}"
        
        Write-Host "Creating release for tag: $tag"
        Write-Host "Version: $version"
        
        # Create release notes using PowerShell array and join
        $releaseNotes = @(
          "## CopyPasta v$version",
          "",
          "A cross-device clipboard sharing application that allows you to share text and images between devices through a web interface.",
          "",
          "### Features",
          "- 🖥️ Windows tray application for clipboard monitoring",
          "- 🌐 Web interface for cross-device clipboard sharing",
          "- 📱 Real-time content synchronization",
          "- 🖼️ Support for both text and image content",
          "- 🔒 Secure session-based authentication",
          "- 🐳 Docker containerized deployment",
          "",
          "### Installation", 
          "#### Windows Client",
          "1. Download and run CopyPastaInstaller-v$version.msi",
          "2. The application will start automatically and run in the system tray",
          "3. Configure your server URL in the settings",
          "",
          "#### Web Server (Docker)",
          '```bash',
          "# Quick start using Docker Hub image",
          "docker compose up -d",
          "",
          "# Or build locally",
          "docker compose up --build -d",
          '```',
          "",
          "### Quick Start",
          "1. Install the Windows client using the MSI installer",
          "2. Deploy the web server using Docker",
          "3. Configure the Windows client to connect to your server",
          "4. Start sharing clipboard content between devices!",
          "",
          "### What's New in v$version",
          "- Enhanced Windows client with improved clipboard monitoring",
          "- Better error handling and logging",
          "- Improved UI and user experience",
          "- Updated documentation and setup guides",
          "",
          "### Components",
          "- **Windows Client**: CopyPasta.exe (system tray application)",
          "- **Web Server**: Flask application with SQLite database",
          "- **Docker**: Multi-stage containerized deployment",
          "- **Security**: Session-based authentication with persistent login"
        ) -join "`n"
        
        # Write release notes to file
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding utf8
        
        # Check if release already exists
        try {
          $existingRelease = gh release view $tag 2>$null
          if ($existingRelease) {
            Write-Host "Release $tag already exists, deleting it first..."
            gh release delete $tag --yes --cleanup-tag
            Start-Sleep -Seconds 2
          }
        } catch {
          Write-Host "No existing release found (this is normal)"
        }
        
        # Create the release
        Write-Host "Creating GitHub release..."
        gh release create $tag `
          --title "CopyPasta v$version" `
          --notes-file "release-notes.md" `
          --latest
        
        Write-Host "✓ GitHub release created successfully"

    - name: Upload MSI to Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $msiPath = "win-copypasta/CopyPasta.Installer/bin/Release/CopyPastaInstaller.msi"
        $assetName = "CopyPastaInstaller-v$version.msi"
        
        Write-Host "Uploading MSI to release..."
        gh release upload "${{ github.ref_name }}" "$msiPath#$assetName" --clobber
        Write-Host "✓ MSI uploaded successfully as: $assetName"

    - name: Upload Build Artifacts (Release)
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-v${{ steps.version.outputs.VERSION }}
        path: |
          win-copypasta/bin/Release/
          win-copypasta/CopyPasta.Installer/bin/Release/
        retention-days: 90