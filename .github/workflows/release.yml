name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  build-linux-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools python3-requests

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in setup.py and changelog
        run: |
          cd linux-cli
          sed -i 's/version="1.0.0"/version="${{ steps.version.outputs.NUMERIC_VERSION }}"/' setup.py
          sed -i '1s/copyp (1.0.0-1)/copyp (${{ steps.version.outputs.NUMERIC_VERSION }}-1)/' debian/changelog

      - name: Build Debian package
        run: |
          cd linux-cli
          chmod +x build-deb.sh
          ./build-deb.sh

      - name: Upload Linux CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: copyp-deb
          path: copyp_*.deb

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          # Extract numeric version (remove 'v' prefix if present)
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            nerwander/copypasta:${{ steps.version.outputs.VERSION }}
            nerwander/copypasta:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker artifact for release
        run: |
          docker pull nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          docker save nerwander/copypasta:${{ steps.version.outputs.VERSION }} | gzip > copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v4
        with:
          name: copypasta-docker
          path: copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz


  build-windows:
    runs-on: windows-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "VERSION=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
          } else {
            $version = "${{ github.ref_name }}"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          }
          $numericVersion = if ("${{ github.event_name }}" -eq "workflow_dispatch") { "${{ github.event.inputs.version }}" } else { "${{ github.ref_name }}" }
          $numericVersion = $numericVersion -replace '^v', ''
          echo "NUMERIC_VERSION=$numericVersion" >> $env:GITHUB_OUTPUT
          echo "Version: $numericVersion"

      # C# Build and Test
      - name: Setup .NET Framework
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Restore NuGet packages
        run: nuget restore win-copypasta/CopyPasta.sln

      - name: Build C# Project (Debug)
        run: msbuild win-copypasta/CopyPasta.csproj /p:Configuration=Debug /p:Platform="Any CPU"

      - name: Build C# Project (Release)
        run: msbuild win-copypasta/CopyPasta.csproj /p:Configuration=Release /p:Platform="Any CPU"

      # Docker tests for main Flask app
      - name: Run Docker tests
        run: |
          echo "Running Docker container tests..."
          if (Test-Path "./scripts/test-all") {
            & "./scripts/test-all"
          } elseif (Test-Path "./test-docker/test-container.sh") {
            bash "./test-docker/test-container.sh"
          } else {
            echo "Running basic Docker compose test..."
            docker compose up -d
            Start-Sleep -Seconds 10
            docker compose down
          }
        continue-on-error: true

      - name: Update Assembly Version
        run: |
          $version = "${{ steps.version.outputs.NUMERIC_VERSION }}"
          $csprojPath = "win-copypasta/CopyPasta.csproj"
          
          Write-Host "Updating CopyPasta.csproj with version: $version"
          
          # Read the current content
          $content = Get-Content $csprojPath -Raw
          
          # Update version properties
          $content = $content -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
          $content = $content -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$version.0</FileVersion>"
          
          # Write back to file
          Set-Content $csprojPath -Value $content -NoNewline
          
          Write-Host "✓ CopyPasta.csproj updated"
          Write-Host "Updated version lines:"
          Get-Content $csprojPath | Select-String "AssemblyVersion|FileVersion"

      - name: Update WiX Product Version
        run: |
          $version = "${{ steps.version.outputs.NUMERIC_VERSION }}"
          $wxsPath = "win-copypasta/CopyPasta.Installer/Product.wxs"
          
          Write-Host "Updating Product.wxs with version: $version"
          
          # Read the current content
          $content = Get-Content $wxsPath -Raw
          
          # Update the Product Version attribute (WiX requires x.x.x.x format)
          $content = $content -replace '(<Product[^>]*\s)Version="[\d\.]*"', "`$1Version=`"$version.0`""
          
          # Write back to file
          Set-Content $wxsPath -Value $content -NoNewline
          
          Write-Host "✓ Product.wxs updated"
          Write-Host "Updated version line:"
          Get-Content $wxsPath | Select-String "Version="
          
      - name: Publish C# Project for WiX
        run: dotnet publish win-copypasta/CopyPasta.csproj -c Release -r win-x86 --self-contained false -o win-copypasta/bin/Release/net6.0-windows/

      # WiX Installer Build
      - name: Setup WiX Toolset
        run: |
          Write-Host "Installing WiX Toolset..."
          choco install wixtoolset -y --no-progress
          Write-Host "Refreshing environment..."
          refreshenv
          # Add WiX to PATH for this session
          $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV

      - name: Remove BOM from WiX files
        run: |
          Write-Host "Checking and removing BOM from WiX files..."
          $wxsPath = "win-copypasta/CopyPasta.Installer/Product.wxs"
          $wixprojPath = "win-copypasta/CopyPasta.Installer/CopyPasta.Installer.wixproj"
          
          # Function to remove BOM from file
          function Remove-BOM {
              param($filePath)
              if (Test-Path $filePath) {
                  $content = Get-Content $filePath -Raw -Encoding UTF8
                  # Remove BOM if present (EF BB BF)
                  if ($content.StartsWith([char]0xFEFF)) {
                      Write-Host "Removing BOM from: $filePath"
                      $content = $content.Substring(1)
                      [System.IO.File]::WriteAllText($filePath, $content, [System.Text.UTF8Encoding]::new($false))
                  } else {
                      Write-Host "No BOM found in: $filePath"
                  }
              }
          }
          
          Remove-BOM $wxsPath
          Remove-BOM $wixprojPath
          Write-Host "✓ BOM check/removal completed"

      - name: Build WiX Installer
        run: |
          $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
          msbuild win-copypasta/CopyPasta.Installer/CopyPasta.Installer.wixproj /p:Configuration=Release /p:Platform=x86

      - name: Verify MSI exists
        run: |
          $msiPath = "win-copypasta/CopyPasta.Installer/bin/Release/CopyPastaInstaller.msi"
          if (Test-Path $msiPath) {
            Write-Host "✓ MSI file found: $msiPath"
            $size = (Get-Item $msiPath).Length
            Write-Host "✓ MSI size: $([math]::Round($size / 1MB, 2)) MB"
          } else {
            Write-Host "✗ MSI file not found: $msiPath"
            Get-ChildItem win-copypasta/CopyPasta.Installer/bin -Recurse
            exit 1
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: copypasta-windows
          path: win-copypasta/CopyPasta.Installer/bin/Release/CopyPastaInstaller.msi

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in project
        run: |
          cd macos
          # Update the marketing version in the project file
          sed -i '' 's/MARKETING_VERSION = 1.0;/MARKETING_VERSION = ${{ steps.version.outputs.NUMERIC_VERSION }};/g' CopyPasta.xcodeproj/project.pbxproj

      - name: Build macOS app (Intel only)
        run: |
          cd macos
          xcodebuild -project CopyPasta.xcodeproj \
            -scheme CopyPasta \
            -configuration Release \
            -arch x86_64 \
            -derivedDataPath build \
            build
          
          # Copy the built app
          cp -R build/Build/Products/Release/CopyPasta.app ./

      - name: Create DMG
        run: |
          cd macos
          # Create a temporary directory for DMG contents
          mkdir -p dmg-contents
          cp -R CopyPasta.app dmg-contents/
          
          # Create symlink to Applications folder
          ln -s /Applications dmg-contents/Applications
          
          # Create DMG
          hdiutil create -volname "CopyPasta ${{ steps.version.outputs.NUMERIC_VERSION }}" \
            -srcfolder dmg-contents \
            -ov -format UDZO \
            CopyPasta-${{ steps.version.outputs.NUMERIC_VERSION }}-intel.dmg

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: copypasta-macos
          path: macos/CopyPasta-${{ steps.version.outputs.NUMERIC_VERSION }}-intel.dmg

  create-release:
    needs: [build-linux-cli, build-docker, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # CopyPasta ${{ steps.version.outputs.VERSION }}
          
          ## What's New
          
          Cross-device clipboard sharing application built with Flask.
          
          ## Downloads
          
          ### Windows
          - **CopyPastaInstaller-v${{ steps.version.outputs.NUMERIC_VERSION }}.msi** - Windows MSI installer
          
          ### macOS
          - **CopyPasta-${{ steps.version.outputs.NUMERIC_VERSION }}-intel.dmg** - macOS application (Intel Macs)
          
          ### Linux CLI
          - **copyp_${{ steps.version.outputs.NUMERIC_VERSION }}-1_all.deb** - Debian package for Linux CLI tool
          
          ### Docker
          - **copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz** - Docker image
          
          ## Features
          
          - 🌐 **Web Interface**: Access clipboard from any device with a web browser
          - 🪟 **Windows Client App**: Native Windows application with system tray integration
          - 🍎 **macOS Status Bar App**: Native macOS application with system integration
          - 🖥️ **Linux CLI Tool**: Command-line interface for seamless clipboard sharing
          - 📝 **Text Support**: Share text content across devices
          - 🖼️ **Image Support**: Copy and paste images across devices
          - 🔒 **Authentication**: Secure login system
          - 🐳 **Docker Deployment**: Easy server setup with Docker
          - 💾 **SQLite Database**: Persistent clipboard storage
          
          ## Installation
          
          ### Windows Client Application
          1. Download `CopyPastaInstaller-v${{ steps.version.outputs.NUMERIC_VERSION }}.msi`
          2. Run the MSI installer
          3. The application will start automatically and run in the system tray
          4. Configure your server URL in the settings
          
          ### macOS Application
          1. Download `CopyPasta-${{ steps.version.outputs.NUMERIC_VERSION }}-intel.dmg`
          2. Open the DMG file
          3. Drag CopyPasta.app to the Applications folder
          4. Launch CopyPasta from Applications
          5. Configure your server settings via the status bar menu
          
          ### Linux CLI Tool
          ```bash
          # Install the Debian package
          sudo dpkg -i copyp_${{ steps.version.outputs.NUMERIC_VERSION }}-1_all.deb
          sudo apt-get install -f  # Install dependencies if needed
          
          # First run - configure your server
          copyp
          
          # Copy text to clipboard
          echo "Hello World" | copyp
          
          # Paste from clipboard
          copyp
          ```
          
          ### Server (Docker)
          
          **Option 1: Using Docker Hub (Recommended)**
          ```bash
          # Pull and run from Docker Hub
          docker run -d -p 5000:5000 --name copypasta nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          
          # Or use docker-compose
          docker compose up -d
          ```
          
          **Option 2: Using Downloaded Image**
          ```bash
          # Load the Docker image
          gunzip -c copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz | docker load
          
          # Run the container
          docker run -d -p 5000:5000 --name copypasta nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          ```
          
          ## System Requirements
          
          - **Server**: Docker or Python 3.11+
          - **Windows App**: Windows 10 or later, .NET Framework 4.8+
          - **macOS App**: macOS 11.0 (Big Sur) or later, Intel Mac
          - **Linux CLI**: Python 3.8+ (included with most Linux distributions)
          
          EOF

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          echo "Creating release for tag: $VERSION"
          
          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists, will add artifacts to it..."
          else
            # Create the release
            echo "Creating GitHub release..."
            gh release create "$VERSION" \
              --title "CopyPasta $VERSION" \
              --notes-file "release_notes.md" \
              --latest
          fi
          
          echo "✓ GitHub release created successfully"

      - name: Upload Linux CLI Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          NUMERIC_VERSION="${{ steps.version.outputs.NUMERIC_VERSION }}"
          CLI_ASSET="artifacts/copyp-deb/copyp_${NUMERIC_VERSION}-1_all.deb"
          
          echo "Uploading Linux CLI package to release..."
          gh release upload "$VERSION" "$CLI_ASSET" --clobber
          echo "✓ Linux CLI package uploaded successfully"

      - name: Upload Docker Image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          DOCKER_ASSET="artifacts/copypasta-docker/copypasta-docker-$VERSION.tar.gz"
          
          echo "Uploading Docker image to release..."
          gh release upload "$VERSION" "$DOCKER_ASSET" --clobber
          echo "✓ Docker image uploaded successfully"

      - name: Upload Windows MSI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          NUMERIC_VERSION="${{ steps.version.outputs.NUMERIC_VERSION }}"
          WINDOWS_ASSET="artifacts/copypasta-windows/CopyPastaInstaller.msi"
          WINDOWS_RELEASE_NAME="CopyPastaInstaller-v${NUMERIC_VERSION}.msi"
          
          echo "Uploading Windows MSI to release..."
          gh release upload "$VERSION" "$WINDOWS_ASSET#$WINDOWS_RELEASE_NAME" --clobber
          echo "✓ Windows MSI uploaded successfully"

      - name: Upload macOS DMG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          NUMERIC_VERSION="${{ steps.version.outputs.NUMERIC_VERSION }}"
          MACOS_ASSET="artifacts/copypasta-macos/CopyPasta-${NUMERIC_VERSION}-intel.dmg"
          
          echo "Uploading macOS DMG to release..."
          gh release upload "$VERSION" "$MACOS_ASSET" --clobber
          echo "✓ macOS DMG uploaded successfully"