name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  build-linux-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools python3-requests

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in setup.py and changelog
        run: |
          cd linux-cli
          sed -i 's/version="1.0.0"/version="${{ steps.version.outputs.NUMERIC_VERSION }}"/' setup.py
          sed -i '1s/copyp (1.0.0-1)/copyp (${{ steps.version.outputs.NUMERIC_VERSION }}-1)/' debian/changelog

      - name: Build Debian package
        run: |
          cd linux-cli
          chmod +x build-deb.sh
          ./build-deb.sh

      - name: Upload Linux CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: copyp-deb
          path: copyp_*.deb

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          # Extract numeric version (remove 'v' prefix if present)
          NUMERIC_VERSION=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}" | sed 's/^v//')
          echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            nerwander/copypasta:${{ steps.version.outputs.VERSION }}
            nerwander/copypasta:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker artifact for release
        run: |
          docker pull nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          docker save nerwander/copypasta:${{ steps.version.outputs.VERSION }} | gzip > copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v4
        with:
          name: copypasta-docker
          path: copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz


  create-release:
    needs: [build-linux-cli, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # CopyPasta ${{ steps.version.outputs.VERSION }}
          
          ## What's New
          
          Cross-device clipboard sharing application built with Flask.
          
          ## Downloads
          
          ### Linux CLI
          - **copyp_${{ steps.version.outputs.NUMERIC_VERSION }}-1_all.deb** - Debian package for Linux CLI tool
          
          ### Docker
          - **copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz** - Docker image
          
          ## Features
          
          - 🌐 **Web Interface**: Access clipboard from any device with a web browser
          - 🖥️ **Linux CLI Tool**: Command-line interface for seamless clipboard sharing
          - 📝 **Text Support**: Share text content across devices
          - 🖼️ **Image Support**: Copy and paste images across devices
          - 🔒 **Authentication**: Secure login system
          - 🐳 **Docker Deployment**: Easy server setup with Docker
          - 💾 **SQLite Database**: Persistent clipboard storage
          
          ## Installation
          
          ### Linux CLI Tool
          ```bash
          # Install the Debian package
          sudo dpkg -i copyp_${{ steps.version.outputs.NUMERIC_VERSION }}-1_all.deb
          sudo apt-get install -f  # Install dependencies if needed
          
          # First run - configure your server
          copyp
          
          # Copy text to clipboard
          echo "Hello World" | copyp
          
          # Paste from clipboard
          copyp
          ```
          
          ### Server (Docker)
          
          **Option 1: Using Docker Hub (Recommended)**
          ```bash
          # Pull and run from Docker Hub
          docker run -d -p 5000:5000 --name copypasta nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          
          # Or use docker-compose
          docker compose up -d
          ```
          
          **Option 2: Using Downloaded Image**
          ```bash
          # Load the Docker image
          gunzip -c copypasta-docker-${{ steps.version.outputs.VERSION }}.tar.gz | docker load
          
          # Run the container
          docker run -d -p 5000:5000 --name copypasta nerwander/copypasta:${{ steps.version.outputs.VERSION }}
          ```
          
          ## System Requirements
          
          - **Server**: Docker or Python 3.11+
          - **Linux CLI**: Python 3.8+ (included with most Linux distributions)
          
          EOF

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          echo "Creating release for tag: $VERSION"
          
          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists, deleting it first..."
            gh release delete "$VERSION" --yes --cleanup-tag
            sleep 2
          fi
          
          # Create the release
          echo "Creating GitHub release..."
          gh release create "$VERSION" \
            --title "CopyPasta $VERSION" \
            --notes-file "release_notes.md" \
            --latest
          
          echo "✓ GitHub release created successfully"

      - name: Upload Linux CLI Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          NUMERIC_VERSION="${{ steps.version.outputs.NUMERIC_VERSION }}"
          CLI_ASSET="artifacts/copyp-deb/copyp_${NUMERIC_VERSION}-1_all.deb"
          
          echo "Uploading Linux CLI package to release..."
          gh release upload "$VERSION" "$CLI_ASSET" --clobber
          echo "✓ Linux CLI package uploaded successfully"

      - name: Upload Docker Image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          DOCKER_ASSET="artifacts/copypasta-docker/copypasta-docker-$VERSION.tar.gz"
          
          echo "Uploading Docker image to release..."
          gh release upload "$VERSION" "$DOCKER_ASSET" --clobber
          echo "✓ Docker image uploaded successfully"